// Production Prisma schema for PostgreSQL (1M+ users)
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management with optimizations for scale
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credentials login
  role          Role      @default(STUDENT)
  phone         String?
  address       String?
  timezone      String?   @default("UTC")
  language      String?   @default("en")
  isActive      Boolean   @default(true)
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  student       Student?
  teacher       Teacher?
  parent        Parent?
  counselor     Counselor?
  adminProfile  AdminProfile?
  
  // Activity tracking
  auditLogs     AuditLog[]
  notifications Notification[]
  payments      Payment[]
  subscriptions Subscription[]
  
  // Assessment relations
  createdWorkflows     AssessmentWorkflow[] @relation("CreatedWorkflows")
  assignedWorkflows    AssessmentWorkflow[] @relation("AssignedWorkflows")
  workflowSteps        WorkflowStep[]
  formSubmissions      FormSubmission[]
  assessmentReports    AssessmentReport[]

  @@index([email])
  @@index([role])
  @@index([isActive])
  @@index([createdAt])
  @@index([lastLoginAt])
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Educational Models with performance optimizations
model School {
  id          String    @id @default(cuid())
  name        String
  address     String?
  phone       String?
  email       String?
  website     String?
  type        SchoolType? @default(PUBLIC)
  board       EducationBoard? @default(CBSE)
  country     String?   @default("US")
  state       String?
  city        String?
  zipCode     String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  students    Student[]
  teachers    Teacher[]

  @@index([isActive])
  @@index([type])
  @@index([country, state, city])
  @@map("schools")
}

model Student {
  id           String    @id @default(cuid())
  userId       String    @unique
  schoolId     String?
  grade        String?
  section      String?
  rollNumber   String?
  dateOfBirth  DateTime?
  gender       Gender?
  bloodGroup   String?
  parentId     String?
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  school       School?   @relation(fields: [schoolId], references: [id])
  parent       Parent?   @relation(fields: [parentId], references: [id])

  assessments  Assessment[]
  testSessions TestSession[]
  testRecommendations TestRecommendation[]
  studentAnalytics StudentAnalytics[]
  studentDataProfiles StudentDataProfile[]

  @@index([userId])
  @@index([schoolId])
  @@index([parentId])
  @@index([grade])
  @@index([isActive])
  @@map("students")
}

model Teacher {
  id          String   @id @default(cuid())
  userId      String   @unique
  schoolId    String?
  department  String?
  subjects    String[] // Array of subjects
  experience  Int?     // Years of experience
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  school      School?  @relation(fields: [schoolId], references: [id])
  assessments Assessment[]
  workflows   AssessmentWorkflow[]

  @@index([userId])
  @@index([schoolId])
  @@index([department])
  @@index([isActive])
  @@map("teachers")
}

model Parent {
  id          String    @id @default(cuid())
  userId      String    @unique
  phone       String?
  address     String?
  occupation  String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  children    Student[]

  @@index([userId])
  @@index([isActive])
  @@map("parents")
}

model Counselor {
  id            String   @id @default(cuid())
  userId        String   @unique
  specialization String?
  licenseNumber String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isActive])
  @@map("counselors")
}

model AdminProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  permissions Json     @default("{}")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isActive])
  @@map("admin_profiles")
}

// Assessment System with performance optimizations
model PricingPlan {
  id                        String   @id @default(cuid())
  name                      String
  planType                  PlanType @default(BASIC)
  price                     Decimal  @db.Decimal(10, 2)
  currency                  String   @default("USD")
  durationMonths            Int      @default(1)
  maxStudents               Int?
  maxAssessmentsPerMonth    Int?
  maxReportsPerMonth        Int?
  featuresList              Json?
  limitations               Json?
  isActive                  Boolean  @default(true)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  subscriptions             Subscription[]

  @@index([planType])
  @@index([isActive])
  @@map("pricing_plans")
}

model AssessmentWorkflow {
  id              String   @id @default(cuid())
  name            String
  description     String?
  status          WorkflowStatus @default(DRAFT)
  createdByUserId String
  assignedToUserId String?
  studentId       String?
  workflowConfig  Json?
  assessmentData  Json?
  results         Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  createdBy       User     @relation(name: "CreatedWorkflows", fields: [createdByUserId], references: [id])
  assignedTo      User?    @relation(name: "AssignedWorkflows", fields: [assignedToUserId], references: [id])
  student         Student? @relation(fields: [studentId], references: [id])
  steps           WorkflowStep[]
  reports         AssessmentReport[]

  @@index([createdByUserId])
  @@index([assignedToUserId])
  @@index([studentId])
  @@index([status])
  @@index([createdAt])
  @@map("assessment_workflows")
}

model WorkflowStep {
  id                String   @id @default(cuid())
  workflowId        String
  stepNumber        Int
  name              String
  description       String?
  status            StepStatus @default(PENDING)
  assignedToUserId  String?
  dueDate           DateTime?
  completedDate     DateTime?
  formConfig        Json?
  validationRules   Json?
  stepData          Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  workflow          AssessmentWorkflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  assignedTo        User?              @relation(fields: [assignedToUserId], references: [id])

  @@index([workflowId])
  @@index([assignedToUserId])
  @@index([status])
  @@index([dueDate])
  @@map("workflow_steps")
}

model AssessmentForm {
  id                    String   @id @default(cuid())
  name                  String
  description           String?
  formType              FormType @default(ACADEMIC)
  version               String   @default("1.0")
  formSchema            Json
  validationRules       Json?
  scoringConfiguration  Json?
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  submissions           FormSubmission[]

  @@index([formType])
  @@index([isActive])
  @@index([createdAt])
  @@map("assessment_forms")
}

model FormSubmission {
  id                String   @id @default(cuid())
  formId            String
  studentId         String
  submittedByUserId String
  submissionData    Json
  calculatedScores  Json?
  validationErrors  Json?
  status            SubmissionStatus @default(PENDING)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  form              AssessmentForm @relation(fields: [formId], references: [id])
  student           Student        @relation(fields: [studentId], references: [id])
  submittedBy       User           @relation(fields: [submittedByUserId], references: [id])

  @@index([formId])
  @@index([studentId])
  @@index([submittedByUserId])
  @@index([status])
  @@index([createdAt])
  @@map("form_submissions")
}

model AssessmentReport {
  id                String   @id @default(cuid())
  assessmentWorkflowId String
  studentId         String
  generatedByUserId String
  reportType        ReportType @default(SUMMARY)
  generationDate    DateTime @default(now())
  content           String?  @db.Text
  recommendations   String?  @db.Text
  reportData        Json?
  status            ReportStatus @default(DRAFT)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  assessmentWorkflow AssessmentWorkflow @relation(fields: [assessmentWorkflowId], references: [id])
  student           Student            @relation(fields: [studentId], references: [id])
  generatedBy       User               @relation(fields: [generatedByUserId], references: [id])

  @@index([assessmentWorkflowId])
  @@index([studentId])
  @@index([generatedByUserId])
  @@index([reportType])
  @@index([status])
  @@index([generationDate])
  @@map("assessment_reports")
}

// Psychometric Testing with performance optimizations
model PsychometricTestCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tests       PsychometricTest[]

  @@index([isActive])
  @@map("psychometric_test_categories")
}

model PsychometricTest {
  id          String   @id @default(cuid())
  categoryId  String
  name        String
  description String?
  version     String   @default("1.0")
  durationMinutes Int?
  instructions String? @db.Text
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category    PsychometricTestCategory @relation(fields: [categoryId], references: [id])
  questions   TestQuestion[]
  sessions    TestSession[]
  recommendations TestRecommendation[]

  @@index([categoryId])
  @@index([isActive])
  @@index([createdAt])
  @@map("psychometric_tests")
}

model TestQuestion {
  id                  String   @id @default(cuid())
  testId              String
  questionText        String   @db.Text
  questionType        QuestionType @default(MULTIPLE_CHOICE)
  options             Json?
  correctAnswer       String?
  points              Int      @default(1)
  scoringCriteria     Json?
  order               Int
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  test                PsychometricTest @relation(fields: [testId], references: [id], onDelete: Cascade)
  responses           TestResponse[]

  @@index([testId])
  @@index([order])
  @@map("test_questions")
}

model TestSession {
  id                  String    @id @default(cuid())
  testId              String
  studentId           String
  status              SessionStatus @default(SCHEDULED)
  scheduledDate       DateTime?
  startedAt           DateTime?
  completedAt         DateTime?
  rawScore            Int?
  percentageScore     Decimal?  @db.Decimal(5, 2)
  standardizedScore   Decimal?  @db.Decimal(5, 2)
  sessionData         Json?
  notes               String?   @db.Text
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  test                PsychometricTest @relation(fields: [testId], references: [id])
  student             Student          @relation(fields: [studentId], references: [id])
  responses           TestResponse[]
  result              TestResult?

  @@index([testId])
  @@index([studentId])
  @@index([status])
  @@index([scheduledDate])
  @@index([completedAt])
  @@map("test_sessions")
}

model TestResponse {
  id          String   @id @default(cuid())
  sessionId   String
  questionId  String
  responseText String?
  selectedOption String?
  isCorrect   Boolean?
  score       Int?
  createdAt   DateTime @default(now())

  session     TestSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  question    TestQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([questionId])
  @@map("test_responses")
}

model TestRecommendation {
  id                    String           @id @default(cuid())
  studentId             String
  recommendedTestId     String
  recommendationDate    DateTime         @default(now())
  reason                String?
  status                RecommendationStatus @default(PENDING)
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt

  student               Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  recommendedTest       PsychometricTest @relation(fields: [recommendedTestId], references: [id])

  @@index([studentId])
  @@index([recommendedTestId])
  @@index([status])
  @@index([recommendationDate])
  @@map("test_recommendations")
}

model TestResult {
  id                      String    @id @default(cuid())
  sessionId               String    @unique
  overallScore            Decimal   @db.Decimal(5, 2)
  interpretation          String?   @db.Text
  categoryScores          Json
  strengths               Json
  areasForImprovement     Json
  recommendations         Json?
  detailedInterpretation  String?   @db.Text
  suggestedActivities     Json?
  parentSummary           String?   @db.Text
  professionalNotes       String?   @db.Text
  followUpRecommendations Json?
  peerComparison          Json?
  developmentalMilestones Json?
  concernFlags            Json?
  referralRecommendations Json?
  generatedAt             DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  session                 TestSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([overallScore])
  @@index([generatedAt])
  @@map("test_results")
}

// Student Analytics & Data with performance optimizations
model Assessment {
  id              String   @id @default(cuid())
  studentId       String
  teacherId       String?
  title           String
  description     String?
  assessmentType  AssessmentType @default(ACADEMIC)
  data            Json
  score           Decimal? @db.Decimal(5, 2)
  maxScore        Decimal? @db.Decimal(5, 2)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  student         Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  teacher         Teacher? @relation(fields: [teacherId], references: [id])

  @@index([studentId])
  @@index([teacherId])
  @@index([assessmentType])
  @@index([createdAt])
  @@map("assessments")
}

model StudentAnalytics {
  id                String   @id @default(cuid())
  studentId         String
  analyticsType     AnalyticsType @default(PERFORMANCE)
  metrics           Json
  trends            Json?
  predictions       Json?
  recommendations   Json?
  generatedAt       DateTime @default(now())
  updatedAt         DateTime @updatedAt

  student           Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([studentId])
  @@index([analyticsType])
  @@index([generatedAt])
  @@map("student_analytics")
}

model MLModel {
  id              String   @id @default(cuid())
  name            String
  modelType       ModelType @default(ACADEMIC_PREDICTOR)
  algorithmType   AlgorithmType @default(NEURAL_NETWORK)
  version         String   @default("1.0")
  accuracyScore   Decimal? @db.Decimal(5, 4)
  trainingDataSize Int     @default(0)
  featureImportance Json?
  modelParameters Json?
  validationMetrics Json?
  modelPath       String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  predictions     MLPrediction[]

  @@index([modelType])
  @@index([isActive])
  @@index([accuracyScore])
  @@map("ml_models")
}

model MLPrediction {
  id            String   @id @default(cuid())
  modelId       String
  studentId     String?
  inputData     Json
  prediction    Json
  confidence    Decimal? @db.Decimal(5, 4)
  predictionType PredictionType @default(ACADEMIC_PERFORMANCE)
  createdAt     DateTime @default(now())

  model         MLModel  @relation(fields: [modelId], references: [id])

  @@index([modelId])
  @@index([studentId])
  @@index([predictionType])
  @@index([createdAt])
  @@map("ml_predictions")
}

model StudentDataProfile {
  id                String   @id @default(cuid())
  studentId         String
  dataSource        DataSource @default(MANUAL)
  academicData      Json?
  psychologicalData Json?
  physicalData      Json?
  behavioralData    Json?
  lastUpdated       DateTime @updatedAt
  createdAt         DateTime @default(now())

  student           Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([studentId])
  @@index([dataSource])
  @@index([lastUpdated])
  @@map("student_data_profiles")
}

// Payment & Subscriptions with performance optimizations
model Payment {
  id              String   @id @default(cuid())
  userId          String
  stripePaymentId String   @unique
  amount          Decimal  @db.Decimal(10, 2)
  currency        String   @default("USD")
  status          PaymentStatus @default(PENDING)
  description     String?
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("payments")
}

model Subscription {
  id              String   @id @default(cuid())
  userId          String
  planId          String
  stripeCustomerId String?
  stripeSubscriptionId String? @unique
  status          SubscriptionStatus @default(ACTIVE)
  startDate       DateTime @default(now())
  endDate         DateTime?
  autoRenew       Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id])
  plan            PricingPlan @relation(fields: [planId], references: [id])

  @@index([userId])
  @@index([planId])
  @@index([status])
  @@index([endDate])
  @@map("subscriptions")
}

// System Models with performance optimizations
model AuditLog {
  id          String   @id @default(cuid())
  userId      String?
  action      String
  entityType  String
  entityId    String?
  details     Json?
  ipAddress   String?
  userAgent   String?
  timestamp   DateTime @default(now())

  user        User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([entityType])
  @@index([timestamp])
  @@map("audit_logs")
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  type        NotificationType @default(INFO)
  title       String
  message     String   @db.Text
  data        Json?
  isRead      Boolean  @default(false)
  readAt      DateTime?
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

// Enums for better type safety and performance
enum Role {
  ADMIN
  TEACHER
  STUDENT
  PARENT
  COUNSELOR
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum SchoolType {
  PUBLIC
  PRIVATE
  INTERNATIONAL
  CHARTER
  HOMESCHOOL
}

enum EducationBoard {
  CBSE
  ICSE
  IGCSE
  IB
  STATE_BOARD
  OTHER
}

enum PlanType {
  BASIC
  PREMIUM
  ENTERPRISE
  CUSTOM
}

enum WorkflowStatus {
  DRAFT
  ACTIVE
  COMPLETED
  ARCHIVED
  CANCELLED
}

enum StepStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  SKIPPED
  CANCELLED
}

enum FormType {
  ACADEMIC
  PSYCHOMETRIC
  BEHAVIORAL
  PHYSICAL
  CAREER
  CUSTOM
}

enum SubmissionStatus {
  PENDING
  COMPLETED
  REVIEWED
  REJECTED
}

enum ReportType {
  SUMMARY
  DETAILED
  PROGRESS
  COMPARATIVE
}

enum ReportStatus {
  DRAFT
  FINAL
  PUBLISHED
  ARCHIVED
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  RATING
  OPEN_ENDED
  LIKERT_SCALE
}

enum SessionStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  EXPIRED
}

enum RecommendationStatus {
  PENDING
  COMPLETED
  DISMISSED
  EXPIRED
}

enum AssessmentType {
  ACADEMIC
  BEHAVIORAL
  PHYSICAL
  PSYCHOLOGICAL
  CAREER
}

enum AnalyticsType {
  PERFORMANCE
  BEHAVIOR
  ENGAGEMENT
  PROGRESS
  PREDICTIVE
}

enum ModelType {
  ACADEMIC_PREDICTOR
  BEHAVIORAL_ANALYZER
  CAREER_RECOMMENDER
  RISK_ASSESSOR
  PERFORMANCE_TRACKER
}

enum AlgorithmType {
  NEURAL_NETWORK
  RANDOM_FOREST
  SVM
  LINEAR_REGRESSION
  DECISION_TREE
  ENSEMBLE
}

enum PredictionType {
  ACADEMIC_PERFORMANCE
  CAREER_PATH
  RISK_ASSESSMENT
  BEHAVIORAL_PATTERN
  LEARNING_STYLE
}

enum DataSource {
  MANUAL
  CSV_UPLOAD
  API_IMPORT
  SYSTEM_GENERATED
  THIRD_PARTY
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELLED
  REFUNDED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAST_DUE
  UNPAID
  EXPIRED
}

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
  REMINDER
  ACHIEVEMENT
}
