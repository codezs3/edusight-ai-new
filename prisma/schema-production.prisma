// Production Prisma schema for PostgreSQL
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("STUDENT")
  accountType   String    @default("INDIVIDUAL")
  schoolId      String?
  parentId      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]

  // Relations
  school   School?  @relation(fields: [schoolId], references: [id])
  parent   Parent?  @relation(fields: [parentId], references: [id])
  students Student[] @relation("StudentUser")
  assessments Assessment[]
  results  AssessmentResult[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// School Management
model School {
  id          String   @id @default(cuid())
  name        String
  address     String?
  city        String?
  state       String?
  country     String?
  postalCode  String?
  phone       String?
  email       String?
  website     String?
  type        String?  // Public, Private, International
  level       String?  // Primary, Secondary, K-12
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users    User[]
  students Student[]
  parents  Parent[]

  @@map("schools")
}

model Parent {
  id        String   @id @default(cuid())
  userId    String   @unique
  schoolId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id])
  school   School?   @relation(fields: [schoolId], references: [id])
  students Student[]

  @@map("parents")
}

model Student {
  id          String   @id @default(cuid())
  userId      String   @unique
  schoolId    String?
  parentId    String?
  grade       String?
  section     String?
  rollNumber  String?
  dateOfBirth DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User      @relation("StudentUser", fields: [userId], references: [id])
  school      School?   @relation(fields: [schoolId], references: [id])
  parent      Parent?   @relation(fields: [parentId], references: [id])
  assessments Assessment[]
  results     AssessmentResult[]

  @@map("students")
}

// Assessment System
model Assessment {
  id          String   @id @default(cuid())
  userId      String
  studentId   String?
  type        String   // ACADEMIC, PSYCHOLOGICAL, PHYSICAL, COMBINED
  title       String
  description String?  @db.Text
  status      String   @default("DRAFT") // DRAFT, IN_PROGRESS, COMPLETED, ARCHIVED
  framework   String?  // CBSE, ICSE, IB, IGCSE, etc.
  grade       String?
  subject     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user    User              @relation(fields: [userId], references: [id])
  student Student?          @relation(fields: [studentId], references: [id])
  results AssessmentResult[]

  @@map("assessments")
}

model AssessmentResult {
  id           String   @id @default(cuid())
  assessmentId String
  userId       String
  studentId    String?
  score        Float?
  maxScore     Float?
  percentage   Float?
  grade        String?
  feedback     String?  @db.Text
  metadata     Json?    // Store additional result data
  completedAt  DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  assessment Assessment @relation(fields: [assessmentId], references: [id])
  user       User       @relation(fields: [userId], references: [id])
  student    Student?   @relation(fields: [studentId], references: [id])

  @@map("assessment_results")
}

// Career Mapping
model CareerField {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?  @db.Text
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  careerPaths CareerPath[]

  @@map("career_fields")
}

model CareerPath {
  id            String   @id @default(cuid())
  careerFieldId String
  title         String
  description   String?  @db.Text
  requirements  String?  @db.Text
  salary        String?
  growth        String?
  education     String?
  skills        String?  @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  careerField CareerField @relation(fields: [careerFieldId], references: [id])
  mappings    CareerMapping[]

  @@map("career_paths")
}

model CareerMapping {
  id           String   @id @default(cuid())
  userId       String
  studentId    String?
  careerPathId String
  score        Float
  compatibility Float
  reasoning    String?  @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  careerPath CareerPath @relation(fields: [careerPathId], references: [id])

  @@map("career_mappings")
}

// Analytics and Reporting
model DashboardMetrics {
  id        String   @id @default(cuid())
  userId    String?
  schoolId  String?
  metric    String
  value     Float
  metadata  Json?
  date      DateTime @default(now())
  createdAt DateTime @default(now())

  @@map("dashboard_metrics")
}

// File Management
model FileUpload {
  id          String   @id @default(cuid())
  userId      String
  fileName    String
  originalName String
  fileSize    Int
  mimeType    String
  filePath    String
  category    String?  // ASSESSMENT, REPORT, PROFILE, etc.
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("file_uploads")
}

// System Configuration
model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String   @db.Text
  type      String   @default("STRING") // STRING, NUMBER, BOOLEAN, JSON
  category  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_config")
}