// Simplified Prisma schema for SQLite (local development)
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User Management
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("STUDENT") // Using String instead of enum
  phone         String?
  address       String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  student       Student?
  teacher       Teacher?
  parent        Parent?

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Educational Models
model School {
  id          String    @id @default(cuid())
  name        String
  address     String?
  phone       String?
  email       String?
  website     String?
  type        String?   // public, private, international
  board       String?   // CBSE, ICSE, IGCSE, IB
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  students    Student[]
  teachers    Teacher[]

  @@map("schools")
}

model Student {
  id           String    @id @default(cuid())
  userId       String    @unique
  schoolId     String?
  grade        String?
  section      String?
  rollNumber   String?
  dateOfBirth  DateTime?
  gender       String?
  bloodGroup   String?
  parentId     String?
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  school       School?   @relation(fields: [schoolId], references: [id])
  parent       Parent?   @relation(fields: [parentId], references: [id])

  assessments  Assessment[]

  @@map("students")
}

model Teacher {
  id          String   @id @default(cuid())
  userId      String   @unique
  schoolId    String?
  employeeId  String?
  department  String?
  subjects    String?  // Comma-separated subjects instead of array
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  school      School?  @relation(fields: [schoolId], references: [id])

  @@map("teachers")
}

model Parent {
  id          String    @id @default(cuid())
  userId      String    @unique
  occupation  String?
  income      String?
  education   String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  children    Student[]

  @@map("parents")
}

// Simplified Assessment Models
model Assessment {
  id          String   @id @default(cuid())
  studentId   String
  title       String
  description String?
  assessmentType String // academic, behavioral, physical
  data        String?  // JSON as string
  score       Float?
  maxScore    Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("assessments")
}

// Subscription Management
model Subscription {
  id                String   @id @default(cuid())
  userId            String
  stripeCustomerId  String?  @unique
  stripeSubscriptionId String? @unique
  stripePriceId     String?
  status            String   // active, canceled, incomplete, past_due
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("subscriptions")
}

model Payment {
  id              String   @id @default(cuid())
  userId          String
  stripePaymentId String   @unique
  amount          Float
  currency        String   @default("USD")
  status          String   // succeeded, pending, failed
  description     String?
  createdAt       DateTime @default(now())

  @@map("payments")
}
