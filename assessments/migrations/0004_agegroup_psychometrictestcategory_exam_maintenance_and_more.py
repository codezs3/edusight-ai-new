# Generated by Django 5.2.5 on 2025-09-07 07:51

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('assessments', '0003_mlassessmentmodel_pricingplan_academicframework_and_more'),
        ('students', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AgeGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('min_age', models.IntegerField()),
                ('max_age', models.IntegerField()),
                ('grade_range', models.CharField(max_length=50)),
                ('description', models.TextField()),
            ],
            options={
                'db_table': 'psychometric_age_groups',
                'ordering': ['min_age'],
            },
        ),
        migrations.CreateModel(
            name='PsychometricTestCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('category_type', models.CharField(choices=[('cognitive', 'Cognitive Development'), ('emotional', 'Emotional Intelligence'), ('social', 'Social Skills'), ('behavioral', 'Behavioral Assessment'), ('personality', 'Personality Traits'), ('learning_style', 'Learning Style'), ('attention', 'Attention & Focus'), ('memory', 'Memory & Retention'), ('creativity', 'Creativity & Innovation'), ('stress', 'Stress & Anxiety'), ('motivation', 'Motivation & Goal Setting'), ('communication', 'Communication Skills')], max_length=20)),
                ('description', models.TextField()),
                ('icon', models.CharField(default='fas fa-brain', max_length=50)),
                ('color_code', models.CharField(default='#3498db', max_length=7)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name_plural': 'Psychometric Test Categories',
                'db_table': 'psychometric_test_categories',
            },
        ),
        migrations.CreateModel(
            name='Exam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('exam_type', models.CharField(choices=[('unit_test', 'Unit Test'), ('mid_term', 'Mid Term'), ('final', 'Final Exam'), ('board', 'Board Exam'), ('competitive', 'Competitive Exam'), ('mock', 'Mock Test')], max_length=20)),
                ('grade', models.CharField(max_length=10)),
                ('exam_date', models.DateTimeField()),
                ('duration_minutes', models.IntegerField()),
                ('total_marks', models.DecimalField(decimal_places=2, max_digits=5)),
                ('passing_marks', models.DecimalField(decimal_places=2, max_digits=5)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='students.school')),
            ],
            options={
                'db_table': 'exams',
                'ordering': ['-exam_date'],
            },
        ),
        migrations.CreateModel(
            name='Maintenance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('maintenance_type', models.CharField(choices=[('scheduled', 'Scheduled Maintenance'), ('emergency', 'Emergency Maintenance'), ('update', 'System Update'), ('backup', 'Backup'), ('security', 'Security Update'), ('performance', 'Performance Optimization')], max_length=20)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='scheduled', max_length=20)),
                ('scheduled_start', models.DateTimeField()),
                ('scheduled_end', models.DateTimeField()),
                ('actual_start', models.DateTimeField(blank=True, null=True)),
                ('actual_end', models.DateTimeField(blank=True, null=True)),
                ('affected_services', models.JSONField(default=list)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'maintenance_records',
                'ordering': ['-scheduled_start'],
            },
        ),
        migrations.CreateModel(
            name='PsychometricTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('test_type', models.CharField(choices=[('questionnaire', 'Questionnaire'), ('scenario', 'Scenario-Based'), ('interactive', 'Interactive Game'), ('observation', 'Observation-Based'), ('performance', 'Performance Task'), ('drawing', 'Drawing Assessment'), ('storytelling', 'Storytelling'), ('puzzle', 'Puzzle/Problem Solving')], max_length=20)),
                ('difficulty_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], max_length=15)),
                ('description', models.TextField()),
                ('instructions', models.TextField()),
                ('duration_minutes', models.IntegerField(help_text='Expected duration in minutes')),
                ('uses_pictures', models.BooleanField(default=False, help_text='Uses visual/picture elements')),
                ('requires_reading', models.BooleanField(default=True, help_text='Requires reading ability')),
                ('requires_writing', models.BooleanField(default=True, help_text='Requires writing ability')),
                ('verbal_administration', models.BooleanField(default=False, help_text='Can be administered verbally')),
                ('max_score', models.IntegerField(default=100)),
                ('scoring_method', models.TextField(help_text='How to calculate scores')),
                ('interpretation_guide', models.TextField(help_text='How to interpret results')),
                ('is_active', models.BooleanField(default=True)),
                ('is_validated', models.BooleanField(default=False, help_text='Psychologically validated')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('age_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tests', to='assessments.agegroup')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tests', to='assessments.psychometrictestcategory')),
            ],
            options={
                'db_table': 'psychometric_tests',
                'ordering': ['age_group__min_age', 'category__name', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=20, unique=True)),
                ('description', models.TextField()),
                ('category', models.CharField(choices=[('academic', 'Academic Skills'), ('cognitive', 'Cognitive Skills'), ('social', 'Social Skills'), ('emotional', 'Emotional Skills'), ('physical', 'Physical Skills'), ('creative', 'Creative Skills'), ('technical', 'Technical Skills'), ('leadership', 'Leadership Skills')], max_length=20)),
                ('grade_levels', models.JSONField(default=list)),
                ('is_core', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'skills',
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=10, unique=True)),
                ('description', models.TextField(blank=True)),
                ('curriculum', models.CharField(choices=[('CBSE', 'CBSE'), ('ICSE', 'ICSE'), ('IGCSE', 'IGCSE'), ('IB', 'International Baccalaureate')], max_length=10)),
                ('grade_levels', models.JSONField(default=list)),
                ('is_core', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'subjects',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Progress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('marks_obtained', models.DecimalField(decimal_places=2, max_digits=5)),
                ('total_marks', models.DecimalField(decimal_places=2, max_digits=5)),
                ('percentage', models.DecimalField(decimal_places=2, max_digits=5)),
                ('grade', models.CharField(blank=True, max_length=5)),
                ('remarks', models.TextField(blank=True)),
                ('date_recorded', models.DateTimeField(default=django.utils.timezone.now)),
                ('assessment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='assessments.assessment')),
                ('exam', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='assessments.exam')),
                ('recorded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='students.student')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assessments.subject')),
            ],
            options={
                'db_table': 'progress_records',
                'ordering': ['-date_recorded'],
            },
        ),
        migrations.AddField(
            model_name='exam',
            name='subject',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assessments.subject'),
        ),
        migrations.CreateModel(
            name='Curriculum',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=10, unique=True)),
                ('curriculum_type', models.CharField(choices=[('CBSE', 'CBSE'), ('ICSE', 'ICSE'), ('IGCSE', 'IGCSE'), ('IB', 'International Baccalaureate'), ('STATE', 'State Board'), ('CUSTOM', 'Custom')], max_length=10)),
                ('description', models.TextField()),
                ('grade_levels', models.JSONField(default=list)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('subjects', models.ManyToManyField(blank=True, related_name='curricula', to='assessments.subject')),
            ],
            options={
                'db_table': 'curricula',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Calendar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('event_type', models.CharField(choices=[('academic', 'Academic Event'), ('assessment', 'Assessment'), ('holiday', 'Holiday'), ('exam', 'Examination'), ('meeting', 'Meeting'), ('other', 'Other')], max_length=20)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('is_all_day', models.BooleanField(default=False)),
                ('location', models.CharField(blank=True, max_length=200)),
                ('grade', models.CharField(blank=True, max_length=10)),
                ('is_recurring', models.BooleanField(default=False)),
                ('recurrence_pattern', models.CharField(blank=True, max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='students.school')),
                ('subject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='assessments.subject')),
            ],
            options={
                'db_table': 'calendar_events',
                'ordering': ['start_date'],
            },
        ),
        migrations.CreateModel(
            name='Template',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('template_type', models.CharField(choices=[('assessment', 'Assessment Template'), ('report', 'Report Template'), ('certificate', 'Certificate Template'), ('letter', 'Letter Template'), ('form', 'Form Template')], max_length=20)),
                ('description', models.TextField(blank=True)),
                ('content', models.TextField()),
                ('variables', models.JSONField(default=list)),
                ('is_default', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'templates',
                'ordering': ['template_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='TestQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_number', models.IntegerField()),
                ('question_text', models.TextField()),
                ('question_type', models.CharField(choices=[('multiple_choice', 'Multiple Choice'), ('true_false', 'True/False'), ('likert_scale', 'Likert Scale'), ('open_ended', 'Open Ended'), ('scenario_choice', 'Scenario Choice'), ('image_selection', 'Image Selection'), ('drawing', 'Drawing/Creative'), ('ranking', 'Ranking'), ('matching', 'Matching')], max_length=20)),
                ('uses_simple_language', models.BooleanField(default=True)),
                ('includes_image', models.ImageField(blank=True, null=True, upload_to='test_images/')),
                ('audio_file', models.FileField(blank=True, null=True, upload_to='test_audio/')),
                ('correct_answer', models.TextField(blank=True, null=True)),
                ('scoring_criteria', models.JSONField(default=dict, help_text='Scoring criteria for this question')),
                ('points', models.IntegerField(default=1)),
                ('options', models.JSONField(default=list, help_text='Answer options for multiple choice')),
                ('is_required', models.BooleanField(default=True)),
                ('order', models.IntegerField(default=0)),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='assessments.psychometrictest')),
            ],
            options={
                'db_table': 'psychometric_test_questions',
                'ordering': ['test', 'question_number'],
                'unique_together': {('test', 'question_number')},
            },
        ),
        migrations.CreateModel(
            name='TestRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trigger_type', models.CharField(choices=[('new_student', 'New Student Registration'), ('age_milestone', 'Age Milestone'), ('grade_transition', 'Grade Transition'), ('performance_concern', 'Performance Concern'), ('parent_request', 'Parent Request'), ('routine_assessment', 'Routine Assessment'), ('behavioral_indicator', 'Behavioral Indicator')], max_length=20)),
                ('priority_level', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], max_length=10)),
                ('recommendation_reason', models.TextField()),
                ('recommended_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('is_shown_to_parent', models.BooleanField(default=False)),
                ('parent_response', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('declined', 'Declined'), ('postponed', 'Postponed')], default='pending', max_length=20)),
                ('parent_response_date', models.DateTimeField(blank=True, null=True)),
                ('parent_notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by_system', models.BooleanField(default=True)),
                ('recommended_test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assessments.psychometrictest')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_recommendations', to='students.student')),
            ],
            options={
                'db_table': 'psychometric_test_recommendations',
                'ordering': ['-priority_level', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TestSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('expired', 'Expired')], default='scheduled', max_length=15)),
                ('scheduled_date', models.DateTimeField()),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('administration_mode', models.CharField(choices=[('self_administered', 'Self-Administered'), ('supervised', 'Supervised'), ('guided', 'Guided'), ('parent_assisted', 'Parent-Assisted')], default='self_administered', max_length=20)),
                ('testing_environment', models.CharField(default='Home', max_length=100)),
                ('special_accommodations', models.TextField(blank=True, null=True)),
                ('raw_score', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('percentage_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('standardized_score', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('session_data', models.JSONField(default=dict, help_text='Detailed session data and responses')),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('administered_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='administered_tests', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_sessions', to='students.student')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assessments.psychometrictest')),
            ],
            options={
                'db_table': 'psychometric_test_sessions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TestResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_scores', models.JSONField(default=dict, help_text='Scores by category/dimension')),
                ('strengths', models.JSONField(default=list, help_text='Identified strengths')),
                ('areas_for_improvement', models.JSONField(default=list, help_text='Areas needing attention')),
                ('interpretation_summary', models.TextField()),
                ('detailed_interpretation', models.TextField()),
                ('recommendations', models.TextField()),
                ('parent_summary', models.TextField(help_text='Simple explanation for parents')),
                ('suggested_activities', models.JSONField(default=list, help_text='Suggested activities to support development')),
                ('professional_notes', models.TextField(blank=True, null=True)),
                ('follow_up_recommendations', models.TextField(blank=True, null=True)),
                ('peer_comparison', models.JSONField(default=dict, help_text='Comparison with age/grade peers')),
                ('developmental_milestones', models.JSONField(default=dict, help_text='Developmental milestone tracking')),
                ('concern_flags', models.JSONField(default=list, help_text='Areas of concern requiring attention')),
                ('referral_recommendations', models.JSONField(default=list, help_text='Professional referral recommendations')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('session', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='result', to='assessments.testsession')),
            ],
            options={
                'db_table': 'psychometric_test_results',
            },
        ),
        migrations.CreateModel(
            name='TestResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('response_text', models.TextField(blank=True, null=True)),
                ('response_value', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('response_data', models.JSONField(default=dict, help_text='Complex response data')),
                ('time_taken_seconds', models.IntegerField(blank=True, null=True)),
                ('response_timestamp', models.DateTimeField(auto_now_add=True)),
                ('points_earned', models.DecimalField(decimal_places=2, default=0, max_digits=6)),
                ('is_correct', models.BooleanField(blank=True, null=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assessments.testquestion')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='assessments.testsession')),
            ],
            options={
                'db_table': 'psychometric_test_responses',
                'unique_together': {('session', 'question')},
            },
        ),
    ]
